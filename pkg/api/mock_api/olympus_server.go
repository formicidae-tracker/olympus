// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/formicidae-tracker/olympus/pkg/api (interfaces: OlympusServer)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	api "github.com/formicidae-tracker/olympus/pkg/api"
	gomock "github.com/golang/mock/gomock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockOlympusServer is a mock of OlympusServer interface.
type MockOlympusServer struct {
	ctrl     *gomock.Controller
	recorder *MockOlympusServerMockRecorder
}

// MockOlympusServerMockRecorder is the mock recorder for MockOlympusServer.
type MockOlympusServerMockRecorder struct {
	mock *MockOlympusServer
}

// NewMockOlympusServer creates a new mock instance.
func NewMockOlympusServer(ctrl *gomock.Controller) *MockOlympusServer {
	mock := &MockOlympusServer{ctrl: ctrl}
	mock.recorder = &MockOlympusServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOlympusServer) EXPECT() *MockOlympusServerMockRecorder {
	return m.recorder
}

// Climate mocks base method.
func (m *MockOlympusServer) Climate(arg0 api.Olympus_ClimateServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Climate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Climate indicates an expected call of Climate.
func (mr *MockOlympusServerMockRecorder) Climate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Climate", reflect.TypeOf((*MockOlympusServer)(nil).Climate), arg0)
}

// SendAlarm mocks base method.
func (m *MockOlympusServer) SendAlarm(arg0 context.Context, arg1 *api.AlarmUpdate) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAlarm", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAlarm indicates an expected call of SendAlarm.
func (mr *MockOlympusServerMockRecorder) SendAlarm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAlarm", reflect.TypeOf((*MockOlympusServer)(nil).SendAlarm), arg0, arg1)
}

// Tracking mocks base method.
func (m *MockOlympusServer) Tracking(arg0 api.Olympus_TrackingServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tracking", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tracking indicates an expected call of Tracking.
func (mr *MockOlympusServerMockRecorder) Tracking(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tracking", reflect.TypeOf((*MockOlympusServer)(nil).Tracking), arg0)
}

// mustEmbedUnimplementedOlympusServer mocks base method.
func (m *MockOlympusServer) mustEmbedUnimplementedOlympusServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOlympusServer")
}

// mustEmbedUnimplementedOlympusServer indicates an expected call of mustEmbedUnimplementedOlympusServer.
func (mr *MockOlympusServerMockRecorder) mustEmbedUnimplementedOlympusServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOlympusServer", reflect.TypeOf((*MockOlympusServer)(nil).mustEmbedUnimplementedOlympusServer))
}
