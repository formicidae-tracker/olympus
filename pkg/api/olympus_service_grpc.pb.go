// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: olympus_service.proto

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OlympusClient is the client API for Olympus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OlympusClient interface {
	Climate(ctx context.Context, opts ...grpc.CallOption) (Olympus_ClimateClient, error)
	Tracking(ctx context.Context, opts ...grpc.CallOption) (Olympus_TrackingClient, error)
	SendAlarm(ctx context.Context, in *AlarmUpdate, opts ...grpc.CallOption) (*empty.Empty, error)
}

type olympusClient struct {
	cc grpc.ClientConnInterface
}

func NewOlympusClient(cc grpc.ClientConnInterface) OlympusClient {
	return &olympusClient{cc}
}

func (c *olympusClient) Climate(ctx context.Context, opts ...grpc.CallOption) (Olympus_ClimateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Olympus_ServiceDesc.Streams[0], "/fort.olympus.Olympus/Climate", opts...)
	if err != nil {
		return nil, err
	}
	x := &olympusClimateClient{stream}
	return x, nil
}

type Olympus_ClimateClient interface {
	Send(*ClimateUpStream) error
	Recv() (*ClimateDownStream, error)
	grpc.ClientStream
}

type olympusClimateClient struct {
	grpc.ClientStream
}

func (x *olympusClimateClient) Send(m *ClimateUpStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *olympusClimateClient) Recv() (*ClimateDownStream, error) {
	m := new(ClimateDownStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *olympusClient) Tracking(ctx context.Context, opts ...grpc.CallOption) (Olympus_TrackingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Olympus_ServiceDesc.Streams[1], "/fort.olympus.Olympus/Tracking", opts...)
	if err != nil {
		return nil, err
	}
	x := &olympusTrackingClient{stream}
	return x, nil
}

type Olympus_TrackingClient interface {
	Send(*TrackingUpStream) error
	Recv() (*TrackingDownStream, error)
	grpc.ClientStream
}

type olympusTrackingClient struct {
	grpc.ClientStream
}

func (x *olympusTrackingClient) Send(m *TrackingUpStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *olympusTrackingClient) Recv() (*TrackingDownStream, error) {
	m := new(TrackingDownStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *olympusClient) SendAlarm(ctx context.Context, in *AlarmUpdate, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fort.olympus.Olympus/SendAlarm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OlympusServer is the server API for Olympus service.
// All implementations must embed UnimplementedOlympusServer
// for forward compatibility
type OlympusServer interface {
	Climate(Olympus_ClimateServer) error
	Tracking(Olympus_TrackingServer) error
	SendAlarm(context.Context, *AlarmUpdate) (*empty.Empty, error)
	mustEmbedUnimplementedOlympusServer()
}

// UnimplementedOlympusServer must be embedded to have forward compatible implementations.
type UnimplementedOlympusServer struct {
}

func (UnimplementedOlympusServer) Climate(Olympus_ClimateServer) error {
	return status.Errorf(codes.Unimplemented, "method Climate not implemented")
}
func (UnimplementedOlympusServer) Tracking(Olympus_TrackingServer) error {
	return status.Errorf(codes.Unimplemented, "method Tracking not implemented")
}
func (UnimplementedOlympusServer) SendAlarm(context.Context, *AlarmUpdate) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAlarm not implemented")
}
func (UnimplementedOlympusServer) mustEmbedUnimplementedOlympusServer() {}

// UnsafeOlympusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OlympusServer will
// result in compilation errors.
type UnsafeOlympusServer interface {
	mustEmbedUnimplementedOlympusServer()
}

func RegisterOlympusServer(s grpc.ServiceRegistrar, srv OlympusServer) {
	s.RegisterService(&Olympus_ServiceDesc, srv)
}

func _Olympus_Climate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OlympusServer).Climate(&olympusClimateServer{stream})
}

type Olympus_ClimateServer interface {
	Send(*ClimateDownStream) error
	Recv() (*ClimateUpStream, error)
	grpc.ServerStream
}

type olympusClimateServer struct {
	grpc.ServerStream
}

func (x *olympusClimateServer) Send(m *ClimateDownStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *olympusClimateServer) Recv() (*ClimateUpStream, error) {
	m := new(ClimateUpStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Olympus_Tracking_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OlympusServer).Tracking(&olympusTrackingServer{stream})
}

type Olympus_TrackingServer interface {
	Send(*TrackingDownStream) error
	Recv() (*TrackingUpStream, error)
	grpc.ServerStream
}

type olympusTrackingServer struct {
	grpc.ServerStream
}

func (x *olympusTrackingServer) Send(m *TrackingDownStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *olympusTrackingServer) Recv() (*TrackingUpStream, error) {
	m := new(TrackingUpStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Olympus_SendAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlarmUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OlympusServer).SendAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fort.olympus.Olympus/SendAlarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OlympusServer).SendAlarm(ctx, req.(*AlarmUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// Olympus_ServiceDesc is the grpc.ServiceDesc for Olympus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Olympus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fort.olympus.Olympus",
	HandlerType: (*OlympusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAlarm",
			Handler:    _Olympus_SendAlarm_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Climate",
			Handler:       _Olympus_Climate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Tracking",
			Handler:       _Olympus_Tracking_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "olympus_service.proto",
}
