// Code generated by MockGen. DO NOT EDIT.
// Source: olympus_service_grpc.pb.go

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockOlympusClient is a mock of OlympusClient interface.
type MockOlympusClient struct {
	ctrl     *gomock.Controller
	recorder *MockOlympusClientMockRecorder
}

// MockOlympusClientMockRecorder is the mock recorder for MockOlympusClient.
type MockOlympusClientMockRecorder struct {
	mock *MockOlympusClient
}

// NewMockOlympusClient creates a new mock instance.
func NewMockOlympusClient(ctrl *gomock.Controller) *MockOlympusClient {
	mock := &MockOlympusClient{ctrl: ctrl}
	mock.recorder = &MockOlympusClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOlympusClient) EXPECT() *MockOlympusClientMockRecorder {
	return m.recorder
}

// Climate mocks base method.
func (m *MockOlympusClient) Climate(ctx context.Context, opts ...grpc.CallOption) (Olympus_ClimateClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Climate", varargs...)
	ret0, _ := ret[0].(Olympus_ClimateClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Climate indicates an expected call of Climate.
func (mr *MockOlympusClientMockRecorder) Climate(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Climate", reflect.TypeOf((*MockOlympusClient)(nil).Climate), varargs...)
}

// SendAlarm mocks base method.
func (m *MockOlympusClient) SendAlarm(ctx context.Context, in *AlarmUpdate, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendAlarm", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAlarm indicates an expected call of SendAlarm.
func (mr *MockOlympusClientMockRecorder) SendAlarm(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAlarm", reflect.TypeOf((*MockOlympusClient)(nil).SendAlarm), varargs...)
}

// Tracking mocks base method.
func (m *MockOlympusClient) Tracking(ctx context.Context, opts ...grpc.CallOption) (Olympus_TrackingClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tracking", varargs...)
	ret0, _ := ret[0].(Olympus_TrackingClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tracking indicates an expected call of Tracking.
func (mr *MockOlympusClientMockRecorder) Tracking(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tracking", reflect.TypeOf((*MockOlympusClient)(nil).Tracking), varargs...)
}

// MockOlympus_ClimateClient is a mock of Olympus_ClimateClient interface.
type MockOlympus_ClimateClient struct {
	ctrl     *gomock.Controller
	recorder *MockOlympus_ClimateClientMockRecorder
}

// MockOlympus_ClimateClientMockRecorder is the mock recorder for MockOlympus_ClimateClient.
type MockOlympus_ClimateClientMockRecorder struct {
	mock *MockOlympus_ClimateClient
}

// NewMockOlympus_ClimateClient creates a new mock instance.
func NewMockOlympus_ClimateClient(ctrl *gomock.Controller) *MockOlympus_ClimateClient {
	mock := &MockOlympus_ClimateClient{ctrl: ctrl}
	mock.recorder = &MockOlympus_ClimateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOlympus_ClimateClient) EXPECT() *MockOlympus_ClimateClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockOlympus_ClimateClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockOlympus_ClimateClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockOlympus_ClimateClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockOlympus_ClimateClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockOlympus_ClimateClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockOlympus_ClimateClient)(nil).Context))
}

// Header mocks base method.
func (m *MockOlympus_ClimateClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockOlympus_ClimateClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockOlympus_ClimateClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockOlympus_ClimateClient) Recv() (*ClimateDownStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ClimateDownStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockOlympus_ClimateClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockOlympus_ClimateClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockOlympus_ClimateClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockOlympus_ClimateClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockOlympus_ClimateClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockOlympus_ClimateClient) Send(arg0 *ClimateUpStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockOlympus_ClimateClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockOlympus_ClimateClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockOlympus_ClimateClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockOlympus_ClimateClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockOlympus_ClimateClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockOlympus_ClimateClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockOlympus_ClimateClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockOlympus_ClimateClient)(nil).Trailer))
}

// MockOlympus_TrackingClient is a mock of Olympus_TrackingClient interface.
type MockOlympus_TrackingClient struct {
	ctrl     *gomock.Controller
	recorder *MockOlympus_TrackingClientMockRecorder
}

// MockOlympus_TrackingClientMockRecorder is the mock recorder for MockOlympus_TrackingClient.
type MockOlympus_TrackingClientMockRecorder struct {
	mock *MockOlympus_TrackingClient
}

// NewMockOlympus_TrackingClient creates a new mock instance.
func NewMockOlympus_TrackingClient(ctrl *gomock.Controller) *MockOlympus_TrackingClient {
	mock := &MockOlympus_TrackingClient{ctrl: ctrl}
	mock.recorder = &MockOlympus_TrackingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOlympus_TrackingClient) EXPECT() *MockOlympus_TrackingClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockOlympus_TrackingClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockOlympus_TrackingClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockOlympus_TrackingClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockOlympus_TrackingClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockOlympus_TrackingClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockOlympus_TrackingClient)(nil).Context))
}

// Header mocks base method.
func (m *MockOlympus_TrackingClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockOlympus_TrackingClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockOlympus_TrackingClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockOlympus_TrackingClient) Recv() (*TrackingDownStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*TrackingDownStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockOlympus_TrackingClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockOlympus_TrackingClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockOlympus_TrackingClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockOlympus_TrackingClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockOlympus_TrackingClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockOlympus_TrackingClient) Send(arg0 *TrackingUpStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockOlympus_TrackingClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockOlympus_TrackingClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockOlympus_TrackingClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockOlympus_TrackingClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockOlympus_TrackingClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockOlympus_TrackingClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockOlympus_TrackingClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockOlympus_TrackingClient)(nil).Trailer))
}

// MockOlympusServer is a mock of OlympusServer interface.
type MockOlympusServer struct {
	ctrl     *gomock.Controller
	recorder *MockOlympusServerMockRecorder
}

// MockOlympusServerMockRecorder is the mock recorder for MockOlympusServer.
type MockOlympusServerMockRecorder struct {
	mock *MockOlympusServer
}

// NewMockOlympusServer creates a new mock instance.
func NewMockOlympusServer(ctrl *gomock.Controller) *MockOlympusServer {
	mock := &MockOlympusServer{ctrl: ctrl}
	mock.recorder = &MockOlympusServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOlympusServer) EXPECT() *MockOlympusServerMockRecorder {
	return m.recorder
}

// Climate mocks base method.
func (m *MockOlympusServer) Climate(arg0 Olympus_ClimateServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Climate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Climate indicates an expected call of Climate.
func (mr *MockOlympusServerMockRecorder) Climate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Climate", reflect.TypeOf((*MockOlympusServer)(nil).Climate), arg0)
}

// SendAlarm mocks base method.
func (m *MockOlympusServer) SendAlarm(arg0 context.Context, arg1 *AlarmUpdate) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAlarm", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAlarm indicates an expected call of SendAlarm.
func (mr *MockOlympusServerMockRecorder) SendAlarm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAlarm", reflect.TypeOf((*MockOlympusServer)(nil).SendAlarm), arg0, arg1)
}

// Tracking mocks base method.
func (m *MockOlympusServer) Tracking(arg0 Olympus_TrackingServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tracking", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tracking indicates an expected call of Tracking.
func (mr *MockOlympusServerMockRecorder) Tracking(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tracking", reflect.TypeOf((*MockOlympusServer)(nil).Tracking), arg0)
}

// mustEmbedUnimplementedOlympusServer mocks base method.
func (m *MockOlympusServer) mustEmbedUnimplementedOlympusServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOlympusServer")
}

// mustEmbedUnimplementedOlympusServer indicates an expected call of mustEmbedUnimplementedOlympusServer.
func (mr *MockOlympusServerMockRecorder) mustEmbedUnimplementedOlympusServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOlympusServer", reflect.TypeOf((*MockOlympusServer)(nil).mustEmbedUnimplementedOlympusServer))
}

// MockUnsafeOlympusServer is a mock of UnsafeOlympusServer interface.
type MockUnsafeOlympusServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOlympusServerMockRecorder
}

// MockUnsafeOlympusServerMockRecorder is the mock recorder for MockUnsafeOlympusServer.
type MockUnsafeOlympusServerMockRecorder struct {
	mock *MockUnsafeOlympusServer
}

// NewMockUnsafeOlympusServer creates a new mock instance.
func NewMockUnsafeOlympusServer(ctrl *gomock.Controller) *MockUnsafeOlympusServer {
	mock := &MockUnsafeOlympusServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOlympusServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOlympusServer) EXPECT() *MockUnsafeOlympusServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOlympusServer mocks base method.
func (m *MockUnsafeOlympusServer) mustEmbedUnimplementedOlympusServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOlympusServer")
}

// mustEmbedUnimplementedOlympusServer indicates an expected call of mustEmbedUnimplementedOlympusServer.
func (mr *MockUnsafeOlympusServerMockRecorder) mustEmbedUnimplementedOlympusServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOlympusServer", reflect.TypeOf((*MockUnsafeOlympusServer)(nil).mustEmbedUnimplementedOlympusServer))
}

// MockOlympus_ClimateServer is a mock of Olympus_ClimateServer interface.
type MockOlympus_ClimateServer struct {
	ctrl     *gomock.Controller
	recorder *MockOlympus_ClimateServerMockRecorder
}

// MockOlympus_ClimateServerMockRecorder is the mock recorder for MockOlympus_ClimateServer.
type MockOlympus_ClimateServerMockRecorder struct {
	mock *MockOlympus_ClimateServer
}

// NewMockOlympus_ClimateServer creates a new mock instance.
func NewMockOlympus_ClimateServer(ctrl *gomock.Controller) *MockOlympus_ClimateServer {
	mock := &MockOlympus_ClimateServer{ctrl: ctrl}
	mock.recorder = &MockOlympus_ClimateServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOlympus_ClimateServer) EXPECT() *MockOlympus_ClimateServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockOlympus_ClimateServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockOlympus_ClimateServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockOlympus_ClimateServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockOlympus_ClimateServer) Recv() (*ClimateUpStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ClimateUpStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockOlympus_ClimateServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockOlympus_ClimateServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockOlympus_ClimateServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockOlympus_ClimateServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockOlympus_ClimateServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockOlympus_ClimateServer) Send(arg0 *ClimateDownStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockOlympus_ClimateServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockOlympus_ClimateServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockOlympus_ClimateServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockOlympus_ClimateServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockOlympus_ClimateServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockOlympus_ClimateServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockOlympus_ClimateServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockOlympus_ClimateServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockOlympus_ClimateServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockOlympus_ClimateServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockOlympus_ClimateServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockOlympus_ClimateServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockOlympus_ClimateServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockOlympus_ClimateServer)(nil).SetTrailer), arg0)
}

// MockOlympus_TrackingServer is a mock of Olympus_TrackingServer interface.
type MockOlympus_TrackingServer struct {
	ctrl     *gomock.Controller
	recorder *MockOlympus_TrackingServerMockRecorder
}

// MockOlympus_TrackingServerMockRecorder is the mock recorder for MockOlympus_TrackingServer.
type MockOlympus_TrackingServerMockRecorder struct {
	mock *MockOlympus_TrackingServer
}

// NewMockOlympus_TrackingServer creates a new mock instance.
func NewMockOlympus_TrackingServer(ctrl *gomock.Controller) *MockOlympus_TrackingServer {
	mock := &MockOlympus_TrackingServer{ctrl: ctrl}
	mock.recorder = &MockOlympus_TrackingServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOlympus_TrackingServer) EXPECT() *MockOlympus_TrackingServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockOlympus_TrackingServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockOlympus_TrackingServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockOlympus_TrackingServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockOlympus_TrackingServer) Recv() (*TrackingUpStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*TrackingUpStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockOlympus_TrackingServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockOlympus_TrackingServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockOlympus_TrackingServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockOlympus_TrackingServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockOlympus_TrackingServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockOlympus_TrackingServer) Send(arg0 *TrackingDownStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockOlympus_TrackingServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockOlympus_TrackingServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockOlympus_TrackingServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockOlympus_TrackingServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockOlympus_TrackingServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockOlympus_TrackingServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockOlympus_TrackingServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockOlympus_TrackingServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockOlympus_TrackingServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockOlympus_TrackingServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockOlympus_TrackingServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockOlympus_TrackingServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockOlympus_TrackingServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockOlympus_TrackingServer)(nil).SetTrailer), arg0)
}
