syntax = "proto3";

option go_package = ".;olympuspb";
package fort.olympus;

import "google/protobuf/timestamp.proto";


message ClimateReport {
	repeated float            temperatures    = 2;
	optional float            humidity        = 3;
	google.protobuf.Timestamp time            = 4;
}

enum AlarmStatus {
	ON  = 0;
	OFF = 1;
}

enum AlarmLevel {
	WARNING = 0;
	EMERGENCY = 1;
}

message AlarmEvent {
	string                    reason          = 1;
	AlarmLevel                level           = 2;
	AlarmStatus               status          = 3;
	google.protobuf.Timestamp time            = 4;
}

message ClimateState {
	string         name          = 1;
	optional float temperature   = 2;
	optional float humidity      = 3;
	optional float wind          = 4;
	optional float visible_light = 5;
	optional float uv_light      = 6;
}

message ZoneDeclaration {
	string         host             = 1;
	string         name             = 2;
	optional float min_temperature  = 3;
	optional float max_temperature  = 4;
	optional float min_humidity     = 5;
	optional float max_humidity     = 6;
}

message ClimateTarget {
	ClimateState                       current     = 1;
	optional ClimateState              current_end = 2;
	optional ClimateState              next        = 3;
	optional ClimateState              next_end    = 4;
	optional google.protobuf.Timestamp next_time   = 5;
}

message ZoneUpStream {
	optional ZoneDeclaration declaration = 1;
	repeated ClimateReport   reports     = 2;
	optional ClimateTarget   target      = 3;
	repeated AlarmEvent      alarms      = 4;
}

message ZoneRegistrationConfirmation {
	bool  send_backlogs = 1;
	int32 page_size     = 2;
}

message ZoneDownStream {
	ZoneRegistrationConfirmation registration_confirmation = 1;
}

message TrackingDeclaration {
	string hostname        = 1;
	string stream_server   = 2;
	string experiment_name = 3;
}

message TrackingUpStream {
	optional TrackingDeclaration declaration = 1;
}

message TrackingDownStream {
}

service Olympus {
	rpc Zone(stream ZoneUpStream) returns ( stream ZoneDownStream );
	rpc Tracking (stream TrackingUpStream) returns ( stream TrackingDownStream);
}
